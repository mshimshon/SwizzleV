"use strict";(self.webpackChunkstatepulse_doc=self.webpackChunkstatepulse_doc||[]).push([[8486],{2046:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"How to Use","title":"How to Use","description":"Convention Related to View Models","source":"@site/docs/How to Use.md","sourceDirName":".","slug":"/how-to-use","permalink":"/how-to-use","draft":false,"unlisted":false,"editUrl":"https://github.com/mshimshon/SwizzleV/docs/How to Use.md","tags":[{"inline":true,"label":"blazor","permalink":"/tags/blazor"},{"inline":true,"label":"viewmodel","permalink":"/tags/viewmodel"},{"inline":true,"label":"dependency-injection","permalink":"/tags/dependency-injection"},{"inline":true,"label":"swizzlev","permalink":"/tags/swizzlev"},{"inline":true,"label":"component-patterns","permalink":"/tags/component-patterns"},{"inline":true,"label":"scoped","permalink":"/tags/scoped"},{"inline":true,"label":"transient","permalink":"/tags/transient"},{"inline":true,"label":".net","permalink":"/tags/net"},{"inline":true,"label":"csharp","permalink":"/tags/csharp"}],"version":"current","sidebarPosition":3,"frontMatter":{"slug":"how-to-use","title":"How to Use","tags":["blazor","viewmodel","dependency-injection","swizzlev","component-patterns","scoped","transient",".net","csharp"],"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"What\'s SwizzleV","permalink":"/"}}');var s=i(4848),t=i(8453);const o={slug:"how-to-use",title:"How to Use",tags:["blazor","viewmodel","dependency-injection","swizzlev","component-patterns","scoped","transient",".net","csharp"],sidebar_position:3},l=void 0,a={},c=[{value:"Convention Related to View Models",id:"convention-related-to-view-models",level:2},{value:"Scenario: Global View Model",id:"scenario-global-view-model",level:2},{value:"Scenario: Per-Component View Model",id:"scenario-per-component-view-model",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"convention-related-to-view-models",children:"Convention Related to View Models"}),"\n",(0,s.jsxs)(n.p,{children:["ViewModels are traditionally registered as singletons or created per component when reusability is needed.",(0,s.jsx)(n.br,{}),"\n","This approach doesn't work well with ",(0,s.jsx)(n.strong,{children:"SwizzleV"}),", as it breaks the simplicity of dependency injection.",(0,s.jsx)(n.br,{}),"\n","SwizzleV is designed with the goal of using DI to resolve ViewModels cleanly and efficiently."]}),"\n",(0,s.jsx)(n.p,{children:"There are a few core conventions to follow (and we assume you're already familiar with the basics):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Do not push down properties that the ViewModel does not use."})," This breaks separation of concerns."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Always rely on the ViewModel's properties first."})," Use component-level properties only when something isn't available in the ViewModel."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This ensures consistency, maintainability, and clean separation between logic and rendering."}),"\n",(0,s.jsx)(n.h2,{id:"scenario-global-view-model",children:"Scenario: Global View Model"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"Global ViewModel"})," is used in pages or components that are ",(0,s.jsx)(n.strong,{children:"not reusable"}),".",(0,s.jsx)(n.br,{}),"\n","It holds the ",(0,s.jsx)(n.strong,{children:"UI state of the component"}),", and this state is ",(0,s.jsx)(n.strong,{children:"shared across all components of the same type"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This is useful for top-level components like pages, layouts, or static content blocks that shouldn't reset state on reuse."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="Articles.razor.cs"',children:"using Microsoft.AspNetCore.Components;\r\nusing SwizzleV;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\n\r\npublic class Articles : ComponentBase\r\n{\r\n    [Inject] public ISwizzleVFactory SwizzleFactory { get; set; } = default!;\r\n\r\n    private ArticlesViewModel _viewModel = default!;\r\n    [Parameter] public List<string> ArticleIds { get; set; } = new();\r\n    protected override async Task OnInitializedAsync()\r\n    {\r\n        // Create or Get Exisintg Hook Binding\r\n        var articleVMHook = SwizzleFactory\r\n            .CreateOrGet<ArticlesViewModel>(() => this, ShouldUpdate);\r\n        // Get View Model Type Instance of the Hook\r\n        VM = articleVMHook.GetViewModel<ArticlesViewModel>()!;\r\n        _viewModel.Id = ArticleIds;\r\n        await _viewModel.LoadAsync();\r\n    }\r\n    private Task ShouldUpdate() => InvokeAsync(StateHasChanged);\r\n}\r\n\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="ArticlesViewModel.cs"',children:'using Microsoft.AspNetCore.Components;\r\nusing SwizzleV;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\n\r\npublic class ArticlesViewModel\r\n{\r\n    public List<string> ArticleIds { get; set; } = new();\r\n    public List<string> Articles { get; private set; } = new();\r\n    private bool _loading = false;\r\n    public bool Loading\r\n    {\r\n        get => _loading;\r\n        set\r\n        {\r\n            if (value != _loading)\r\n                _= _swizzleViewModel.SpreadChanges(() => this);\r\n            _loading = value;\r\n        }\r\n    }\r\n    private readonly ISwizzleViewModel _swizzleViewModel;\r\n\r\n    public ArticleViewModel(ISwizzleViewModel swizzleViewModel)\r\n    {\r\n        _swizzleViewModel = swizzleViewModel;\r\n    }\r\n\r\n    public async Task LoadAsync()\r\n    {\r\n        Loading = true;\r\n        await Task.Delay(500); // Simulate async load\r\n        Articles = new List<string> { "a1", "a2", "a3" };\r\n        Loading = false;\r\n    }\r\n}\r\n\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"services.AddScoped<ArticlesViewModel>();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"scenario-per-component-view-model",children:"Scenario: Per-Component View Model"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Per-Component ViewModels"})," are transient and scoped to each rendered instance of a component.",(0,s.jsx)(n.br,{}),"\n","This ensures that ",(0,s.jsx)(n.strong,{children:"every component has its own isolated state"}),", making them ideal for reusable components."]}),"\n",(0,s.jsxs)(n.p,{children:["SwizzleV resolves these ViewModels using ",(0,s.jsx)(n.strong,{children:"dependency injection"}),", so you don't need to manually pass services to them.",(0,s.jsx)(n.br,{}),"\n","This keeps the architecture clean and consistent\u2014constructor-injected services are automatically wired up, and the ViewModel is managed safely for the lifetime of the component instance."]}),"\n",(0,s.jsxs)(n.p,{children:["The logic behind ",(0,s.jsx)(n.strong,{children:"Per-Component ViewModels"})," is exactly the same as for ",(0,s.jsx)(n.strong,{children:"Global ViewModels"}),".",(0,s.jsx)(n.br,{}),"\n","The only difference lies in how the ViewModel is registered:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Global ViewModels"})," are registered as ",(0,s.jsx)(n.code,{children:"Scoped"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Per-Component ViewModels"})," are registered as ",(0,s.jsx)(n.code,{children:"Transient"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This design makes it easy to switch between global and per-component behavior with ",(0,s.jsx)(n.strong,{children:"minimal migration effort"}),".",(0,s.jsx)(n.br,{}),"\n","SwizzleV handles the rest, maintaining clean dependency injection and lifecycle consistency."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="ArticleCard.razor.cs"',children:"using Microsoft.AspNetCore.Components;\r\nusing SwizzleV;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\n\r\npublic class ArticleCard : ComponentBase\r\n{\r\n    [Inject] public ISwizzleVFactory SwizzleFactory { get; set; } = default!;\r\n\r\n    private ArticleCardViewModel _viewModel = default!;\r\n    [Parameter] public string ArticleId { get; set; } = default!;\r\n    protected override async Task OnInitializedAsync()\r\n    {\r\n        // Create or Get Exisintg Hook Binding\r\n        var articleVMHook = SwizzleFactory.CreateOrGet<ArticleCardViewModel>(() => this, () => InvokeAsync(() => StateHasChanged()));\r\n        // Get View Model Type Instance of the Hook\r\n        VM = articleVMHook.GetViewModel<ArticleCardViewModel>()!;\r\n        // Push Down Paramters Used by View Model\r\n        _viewModel.Id = ArticleId;\r\n        await _viewModel.LoadAsync();\r\n    }\r\n}\r\n\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="ArticleCardViewModel.cs"',children:'using Microsoft.AspNetCore.Components;\r\nusing SwizzleV;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\n\r\npublic class ArticleCardViewModel\r\n{\r\n    public string ArticleId { get; set; } = default!;\r\n    public string ArticleName { get; private set; }  = default!;\r\n    public string ArticlePicture { get; private set; }  = default!;\r\n    private bool _loading = false;\r\n    public bool Loading\r\n    {\r\n        get => _loading;\r\n        set\r\n        {\r\n            if (value != _loading)\r\n                _= _swizzleViewModel.SpreadChanges(() => this);\r\n            _loading = value;\r\n        }\r\n    }\r\n    private readonly ISwizzleViewModel _swizzleViewModel;\r\n\r\n    public ArticleViewModel(ISwizzleViewModel swizzleViewModel)\r\n    {\r\n        _swizzleViewModel = swizzleViewModel;\r\n    }\r\n\r\n    public async Task LoadAsync()\r\n    {\r\n        Loading = true;\r\n        await Task.Delay(500); // Simulate async load\r\n        ArticleName = "Maksim Shimshon";\r\n        ArticlePicture = "https://funnybunny.gman/too-good-to-be-shown.jpg";\r\n        Loading = false;\r\n    }\r\n}\r\n\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"services.AddTransient<ArticleCardViewModel>();\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);